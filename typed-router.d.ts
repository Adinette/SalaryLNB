/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/:all(.*)': RouteRecordInfo<'/:all(.*)', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/authentication/forgot/password': RouteRecordInfo<'/authentication/forgot/password', '/authentication/forgot/password', Record<never, never>, Record<never, never>>,
    'authentication-login': RouteRecordInfo<'authentication-login', '/authentication/login', Record<never, never>, Record<never, never>>,
    'dashboard': RouteRecordInfo<'dashboard', '/dashboard', Record<never, never>, Record<never, never>>,
    '/forbidden': RouteRecordInfo<'/forbidden', '/forbidden', Record<never, never>, Record<never, never>>,
    '/machines': RouteRecordInfo<'/machines', '/machines', Record<never, never>, Record<never, never>>,
    '/machines/add': RouteRecordInfo<'/machines/add', '/machines/add', Record<never, never>, Record<never, never>>,
    '/machines/edit/:id': RouteRecordInfo<'/machines/edit/:id', '/machines/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/operators': RouteRecordInfo<'/operators', '/operators', Record<never, never>, Record<never, never>>,
    '/operators/add': RouteRecordInfo<'/operators/add', '/operators/add', Record<never, never>, Record<never, never>>,
    '/operators/edit/:id': RouteRecordInfo<'/operators/edit/:id', '/operators/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/operators copy': RouteRecordInfo<'/operators copy', '/operators copy', Record<never, never>, Record<never, never>>,
    '/operators copy/add': RouteRecordInfo<'/operators copy/add', '/operators copy/add', Record<never, never>, Record<never, never>>,
    '/operators copy/edit/:id': RouteRecordInfo<'/operators copy/edit/:id', '/operators copy/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/operators-salary': RouteRecordInfo<'/operators-salary', '/operators-salary', Record<never, never>, Record<never, never>>,
    '/operators-salary/add': RouteRecordInfo<'/operators-salary/add', '/operators-salary/add', Record<never, never>, Record<never, never>>,
    '/operators-salary/details/:id': RouteRecordInfo<'/operators-salary/details/:id', '/operators-salary/details/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/operators-salary/edit/:id': RouteRecordInfo<'/operators-salary/edit/:id', '/operators-salary/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/users': RouteRecordInfo<'/users', '/users', Record<never, never>, Record<never, never>>,
    '/users/add': RouteRecordInfo<'/users/add', '/users/add', Record<never, never>, Record<never, never>>,
    '/users/edit/:id': RouteRecordInfo<'/users/edit/:id', '/users/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[...all].vue': {
      routes: '/:all(.*)'
      views: never
    }
    'src/pages/authentication/forgot/password.vue': {
      routes: '/authentication/forgot/password'
      views: never
    }
    'src/pages/authentication/login.vue': {
      routes: 'authentication-login'
      views: never
    }
    'src/pages/dashboard.vue': {
      routes: 'dashboard'
      views: never
    }
    'src/pages/forbidden.vue': {
      routes: '/forbidden'
      views: never
    }
    'src/pages/machines/index.vue': {
      routes: '/machines'
      views: never
    }
    'src/pages/machines/add.vue': {
      routes: '/machines/add'
      views: never
    }
    'src/pages/machines/edit/[id].vue': {
      routes: '/machines/edit/:id'
      views: never
    }
    'src/pages/operators/index.vue': {
      routes: '/operators'
      views: never
    }
    'src/pages/operators/add.vue': {
      routes: '/operators/add'
      views: never
    }
    'src/pages/operators/edit/[id].vue': {
      routes: '/operators/edit/:id'
      views: never
    }
    'src/pages/operators copy/index.vue': {
      routes: '/operators copy'
      views: never
    }
    'src/pages/operators copy/add.vue': {
      routes: '/operators copy/add'
      views: never
    }
    'src/pages/operators copy/edit/[id].vue': {
      routes: '/operators copy/edit/:id'
      views: never
    }
    'src/pages/operators-salary/index.vue': {
      routes: '/operators-salary'
      views: never
    }
    'src/pages/operators-salary/add.vue': {
      routes: '/operators-salary/add'
      views: never
    }
    'src/pages/operators-salary/details/[id].vue': {
      routes: '/operators-salary/details/:id'
      views: never
    }
    'src/pages/operators-salary/edit/[id].vue': {
      routes: '/operators-salary/edit/:id'
      views: never
    }
    'src/pages/users/index.vue': {
      routes: '/users'
      views: never
    }
    'src/pages/users/add.vue': {
      routes: '/users/add'
      views: never
    }
    'src/pages/users/edit/[id].vue': {
      routes: '/users/edit/:id'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
